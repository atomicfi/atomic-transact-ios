// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name QuantumIOS
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import Combine
import Foundation
import MuppetIOS
import Swift
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class ToolbarWebView : QuantumIOS.WebView {
  @_Concurrency.MainActor @preconcurrency public var autofillAssistant: [Swift.String : Any]? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency override public class func makeWebView(frame: CoreFoundation.CGRect = .zero, configuration: WebKit.WKWebViewConfiguration = .init()) -> QuantumIOS.ToolbarWebView
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var inputAccessoryView: UIKit.UIView? {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency public func setAutofillToolbarItems(value: Swift.String, title: Swift.String)
  @_Concurrency.MainActor @preconcurrency public func setDefaultToolbarItems()
  @_Concurrency.MainActor @preconcurrency public static func checkIconCache(for imagePath: Swift.String)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect, configuration: WebKit.WKWebViewConfiguration)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class WebView : WebKit.WKWebView {
  @_Concurrency.MainActor @preconcurrency public class func makeWebView(frame: CoreFoundation.CGRect = .zero, configuration: WebKit.WKWebViewConfiguration = .init()) -> QuantumIOS.WebView
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect, configuration: WebKit.WKWebViewConfiguration)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class WebViewController : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency weak public var webView: QuantumIOS.WebView!
  @_Concurrency.MainActor @preconcurrency public var cancel: (() -> ())?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency public func hideAssistantTitle()
  @_Concurrency.MainActor @preconcurrency public func showAssistant(title: Swift.String)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_Concurrency.MainActor public class Quantum {
  @_Concurrency.MainActor public var muppet: MuppetIOS.Muppet?
  @_Concurrency.MainActor public init()
  @_Concurrency.MainActor public func initialize(token: Swift.String, view: WebKit.WKWebView, controller: UIKit.UIViewController, apiUrl: Swift.String = "https://api.atomicfi.com") async throws
  @_Concurrency.MainActor public func goto(url: Swift.String, headers: [Swift.String : Swift.String] = [:], timeout: Swift.Int64 = 3000) async throws -> Swift.Bool
  @_Concurrency.MainActor public func cleanup()
  @_Concurrency.MainActor public func update(presentationSource: UIKit.UIViewController)
  @objc deinit
}
extension QuantumIOS.Quantum : Swift.Sendable {}
